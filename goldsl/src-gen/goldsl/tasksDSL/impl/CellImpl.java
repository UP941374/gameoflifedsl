/**
 * generated by Xtext 2.28.0
 */
package goldsl.tasksDSL.impl;

import goldsl.tasksDSL.Cell;
import goldsl.tasksDSL.FillCell;
import goldsl.tasksDSL.NormalCell;
import goldsl.tasksDSL.TasksDSLPackage;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Cell</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link goldsl.tasksDSL.impl.CellImpl#getNCells <em>NCells</em>}</li>
 *   <li>{@link goldsl.tasksDSL.impl.CellImpl#getFillCells <em>Fill Cells</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CellImpl extends MinimalEObjectImpl.Container implements Cell
{
  /**
   * The cached value of the '{@link #getNCells() <em>NCells</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNCells()
   * @generated
   * @ordered
   */
  protected EList<NormalCell> nCells;

  /**
   * The cached value of the '{@link #getFillCells() <em>Fill Cells</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFillCells()
   * @generated
   * @ordered
   */
  protected EList<FillCell> fillCells;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CellImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TasksDSLPackage.Literals.CELL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<NormalCell> getNCells()
  {
    if (nCells == null)
    {
      nCells = new EObjectContainmentEList<NormalCell>(NormalCell.class, this, TasksDSLPackage.CELL__NCELLS);
    }
    return nCells;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<FillCell> getFillCells()
  {
    if (fillCells == null)
    {
      fillCells = new EObjectContainmentEList<FillCell>(FillCell.class, this, TasksDSLPackage.CELL__FILL_CELLS);
    }
    return fillCells;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TasksDSLPackage.CELL__NCELLS:
        return ((InternalEList<?>)getNCells()).basicRemove(otherEnd, msgs);
      case TasksDSLPackage.CELL__FILL_CELLS:
        return ((InternalEList<?>)getFillCells()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TasksDSLPackage.CELL__NCELLS:
        return getNCells();
      case TasksDSLPackage.CELL__FILL_CELLS:
        return getFillCells();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TasksDSLPackage.CELL__NCELLS:
        getNCells().clear();
        getNCells().addAll((Collection<? extends NormalCell>)newValue);
        return;
      case TasksDSLPackage.CELL__FILL_CELLS:
        getFillCells().clear();
        getFillCells().addAll((Collection<? extends FillCell>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TasksDSLPackage.CELL__NCELLS:
        getNCells().clear();
        return;
      case TasksDSLPackage.CELL__FILL_CELLS:
        getFillCells().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TasksDSLPackage.CELL__NCELLS:
        return nCells != null && !nCells.isEmpty();
      case TasksDSLPackage.CELL__FILL_CELLS:
        return fillCells != null && !fillCells.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //CellImpl

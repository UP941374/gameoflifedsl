/*
 * generated by Xtext 2.28.0
 */
package goldsl.serializer;

import com.google.inject.Inject;
import goldsl.services.TasksDSLGrammarAccess;
import goldsl.tasksDSL.Cell;
import goldsl.tasksDSL.Gameoflife;
import goldsl.tasksDSL.Rule;
import goldsl.tasksDSL.TasksDSLPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class TasksDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TasksDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TasksDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TasksDSLPackage.CELL:
				sequence_Cell(context, (Cell) semanticObject); 
				return; 
			case TasksDSLPackage.GAMEOFLIFE:
				sequence_Gameoflife(context, (Gameoflife) semanticObject); 
				return; 
			case TasksDSLPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cell returns Cell
	 *
	 * Constraint:
	 *     ((x=INT y=INT (no=INT dir=Direction)?) | no=INT)
	 * </pre>
	 */
	protected void sequence_Cell(ISerializationContext context, Cell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Gameoflife returns Gameoflife
	 *
	 * Constraint:
	 *     ((cells+=Cell+ rules+=Rule+) | rules+=Rule+)?
	 * </pre>
	 */
	protected void sequence_Gameoflife(ISerializationContext context, Gameoflife semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (type=RuleType sign='&lt;'? n=INT)
	 * </pre>
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

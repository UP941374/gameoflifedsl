/*
 * generated by Xtext 2.28.0
 */
package goldsl.serializer;

import com.google.inject.Inject;
import goldsl.services.TasksDSLGrammarAccess;
import goldsl.tasksDSL.Cell;
import goldsl.tasksDSL.FillCell;
import goldsl.tasksDSL.GameOfLife;
import goldsl.tasksDSL.Grid;
import goldsl.tasksDSL.NormalCell;
import goldsl.tasksDSL.Rule;
import goldsl.tasksDSL.TasksDSLPackage;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class TasksDSLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TasksDSLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TasksDSLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TasksDSLPackage.CELL:
				sequence_Cell(context, (Cell) semanticObject); 
				return; 
			case TasksDSLPackage.FILL_CELL:
				sequence_FillCell(context, (FillCell) semanticObject); 
				return; 
			case TasksDSLPackage.GAME_OF_LIFE:
				sequence_GameOfLife(context, (GameOfLife) semanticObject); 
				return; 
			case TasksDSLPackage.GRID:
				sequence_Grid(context, (Grid) semanticObject); 
				return; 
			case TasksDSLPackage.NORMAL_CELL:
				sequence_NormalCell(context, (NormalCell) semanticObject); 
				return; 
			case TasksDSLPackage.RULE:
				sequence_Rule(context, (Rule) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cell returns Cell
	 *
	 * Constraint:
	 *     (nCells+=NormalCell | fillCells+=FillCell)+
	 * </pre>
	 */
	protected void sequence_Cell(ISerializationContext context, Cell semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     FillCell returns FillCell
	 *
	 * Constraint:
	 *     (x=INT y=INT repAmount=INT dir=Direction)
	 * </pre>
	 */
	protected void sequence_FillCell(ISerializationContext context, FillCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.FILL_CELL__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.FILL_CELL__X));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.FILL_CELL__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.FILL_CELL__Y));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.FILL_CELL__REP_AMOUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.FILL_CELL__REP_AMOUNT));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.FILL_CELL__DIR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.FILL_CELL__DIR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFillCellAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getFillCellAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.accept(grammarAccess.getFillCellAccess().getRepAmountINTTerminalRuleCall_5_0(), semanticObject.getRepAmount());
		feeder.accept(grammarAccess.getFillCellAccess().getDirDirectionEnumRuleCall_7_0(), semanticObject.getDir());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     GameOfLife returns GameOfLife
	 *
	 * Constraint:
	 *     ((((grid=Grid cells+=Cell+) | cells+=Cell+)? rules+=Rule+) | rules+=Rule+)?
	 * </pre>
	 */
	protected void sequence_GameOfLife(ISerializationContext context, GameOfLife semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Grid returns Grid
	 *
	 * Constraint:
	 *     (width=INT height=INT)
	 * </pre>
	 */
	protected void sequence_Grid(ISerializationContext context, Grid semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.GRID__WIDTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.GRID__WIDTH));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.GRID__HEIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.GRID__HEIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGridAccess().getWidthINTTerminalRuleCall_1_0(), semanticObject.getWidth());
		feeder.accept(grammarAccess.getGridAccess().getHeightINTTerminalRuleCall_3_0(), semanticObject.getHeight());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     NormalCell returns NormalCell
	 *
	 * Constraint:
	 *     (x=INT y=INT)
	 * </pre>
	 */
	protected void sequence_NormalCell(ISerializationContext context, NormalCell semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.NORMAL_CELL__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.NORMAL_CELL__X));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.NORMAL_CELL__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.NORMAL_CELL__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getNormalCellAccess().getXINTTerminalRuleCall_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getNormalCellAccess().getYINTTerminalRuleCall_3_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Rule returns Rule
	 *
	 * Constraint:
	 *     (type=RuleType sign=CompareSign n=INT)
	 * </pre>
	 */
	protected void sequence_Rule(ISerializationContext context, Rule semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.RULE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.RULE__TYPE));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.RULE__SIGN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.RULE__SIGN));
			if (transientValues.isValueTransient(semanticObject, TasksDSLPackage.Literals.RULE__N) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TasksDSLPackage.Literals.RULE__N));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRuleAccess().getTypeRuleTypeEnumRuleCall_1_0(), semanticObject.getType());
		feeder.accept(grammarAccess.getRuleAccess().getSignCompareSignEnumRuleCall_2_0(), semanticObject.getSign());
		feeder.accept(grammarAccess.getRuleAccess().getNINTTerminalRuleCall_3_0(), semanticObject.getN());
		feeder.finish();
	}
	
	
}
